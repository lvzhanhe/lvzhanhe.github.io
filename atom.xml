<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhanhe&#39;s BLOG</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-08T02:30:15.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhanhe Lyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web Crawler in Python</title>
    <link href="http://yoursite.com/2017/08/07/Web-Crawler-in-Python/"/>
    <id>http://yoursite.com/2017/08/07/Web-Crawler-in-Python/</id>
    <published>2017-08-07T20:02:37.000Z</published>
    <updated>2017-08-08T02:30:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Search engines like Google, Bin, and Yahoo have become an irreplaceable tool of human life today. They filter information and retrieve data, helping people find what they want. However, it is not so familiar to people how search engines work. Actually, the main part of them is web Crawler (also called Spider), which is heavily used in today’s technologies. They are used to get specific information on web pages and do further operations.</p>
<h2 id="Why-python"><a href="#Why-python" class="headerlink" title="Why python?"></a>Why python?</h2><p>As we can find, nowadays, most of web crawlers are based on Python. Lots of people may be curious about why it is Python. Actually, other languages like PHP, Java, C++, can also implement similar functions. However, Python has many advantages over them. First of all, Python has great HTTP libraries and HTML parsers. A basic one used to do this is “request”. An advanced one is “Beautiful Soup” (Mike 06), which is designed as a top of popular Python parsers like lxml. </p>
<a id="more"></a>
<p>Furthermore, there are a lot of useful frameworks off the shelf. For instance, Tornado can support the I/O (input or output) from being blocked. Besides, Scrapy is a good one to build a scalable and distributed crawler. These will make developing period easier and more efficient. Therefore, it is safe to conclude that Python is a good choice for developing a web crawler.</p>
<h2 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h2><p>The basic mechanism of web crawler is not complicated. Web crawler scans the web, reading specific data which has been set previously. It may start with some popular sites which have higher hits. Then it can spread through the internet by finding the related link within the sites. The crawler turns its finding to a giant index (Paul 05). In this giant index, it contains a great deal of data which meet requirements. A case in point, when a word “engineer” is entered in a search engine, it will check the whole index, then provide items related to “engineer”. Web crawler scan the web regularly to make sure its information is up to date. It sounds like an easy process. </p>
<p>However, in order to acquire and then provide both accurate and reliable information, there are further steps to do (Vural 03). Web crawler should not only know what they get, but should also recognize where they get this data. It is extremely vital in practical application. For instance, a word appears in “heading” is more appropriate that which appears in “context”. For another, when one search in a video website, it will return particular information like name, singer, album. These are all related staff surrounding key words. Besides, there are always complicated algorithms based on the content of index. Essentially, these are equations to value and rate results coded by programmers. </p>
<h2 id="How-to-make-a-crawler"><a href="#How-to-make-a-crawler" class="headerlink" title="How to make a crawler?"></a>How to make a crawler?</h2><p>A python editor and a python environment are required to encode and implement a crawler program. Basically, the module called <code>urllib</code> is used to open a link in python program and return a HTML file.( Wael 03) The argument is just like <code>page = urllib.request.urlopen(url, data, timeout)</code>. Initialing a variable for the link is recommended, since there are always further algorithms on it. The first parameter is the link, the second parameter is data need to be transported in this process, the final one is setting timeout. After that, the main task is to find useful information in that file. For example, specific data can be found by locating specific label name. The argument is like <code>start_link = page.find(“&lt;span class = ‘title’&gt;”)</code>. </p>
<p>Sometimes the data found just used to print in a python console. In order to be printed friendly, some small changes should be replaced. For instance, <code>&lt;br&gt;</code> should be replaced with <code>&lt;\t&gt;</code>. However, sometimes the data need to be stored in local file system by using the function <code>urllib.urlretrieve()</code> and a loop if necessary. In some dynamic websites, the data need to be transported to another page, like login page (Kristopher 05). At this point, there are two data transfer functions called get and post. For the function <code>get</code>, it transfers the data by creating a new url containing the data. And for the function <code>post</code>, it transfers by creating a dictionary containing different parameters. </p>
<h2 id="What’s-it-used-for？"><a href="#What’s-it-used-for？" class="headerlink" title="What’s it used for？"></a>What’s it used for？</h2><p>Apart from the search engine mentioned in the beginning, there are a great number of projects can be achieved by using web crawler. There is an interesting example given by Emily L, a graduate student at Harvard University. Some programmers used web crawler to dig out what is the most common time for people to sleep. Since most people would like to post something like “I need to sleep” before they get to bed, the web crawler will scan through Twitter how many times the word “sleep” appeared in successive time intervals. Then it stores the data and presents it friendly as a diagram.</p>
<h2 id="Works-cited"><a href="#Works-cited" class="headerlink" title="Works cited"></a>Works cited</h2><p>Thelwall, Mike. “A Web Crawler Design for DataMining.” vol. 27, SAGE Publications, Inc, Thousand Oaks, CA, 2011;2001;,doi:10.1177/016555150102700503.</p>
<p>Gab–Allah, Wael A., Ben Bella S. Tawfik, and Hamed M.Nassar. “An Ontology Based Crawler for Retrieving Information Distributedon the Web.” International Journal of Engineering Research andApplications, vol. 6, no. 6, 2016, pp. 57-63.</p>
<p>Jones, Kristopher B. Search Engine Optimization: Your VisualBlueprint for Effective Internet Marketing. Wiley, Indianapolis, IN, 2008.</p>
<p>Zandbergen, Paul A. Python Scripting for ArcGIS. ESRI Press,New York, 2013;2015;.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Search engines like Google, Bin, and Yahoo have become an irreplaceable tool of human life today. They filter information and retrieve data, helping people find what they want. However, it is not so familiar to people how search engines work. Actually, the main part of them is web Crawler (also called Spider), which is heavily used in today’s technologies. They are used to get specific information on web pages and do further operations.&lt;/p&gt;
&lt;h2 id=&quot;Why-python&quot;&gt;&lt;a href=&quot;#Why-python&quot; class=&quot;headerlink&quot; title=&quot;Why python?&quot;&gt;&lt;/a&gt;Why python?&lt;/h2&gt;&lt;p&gt;As we can find, nowadays, most of web crawlers are based on Python. Lots of people may be curious about why it is Python. Actually, other languages like PHP, Java, C++, can also implement similar functions. However, Python has many advantages over them. First of all, Python has great HTTP libraries and HTML parsers. A basic one used to do this is “request”. An advanced one is “Beautiful Soup” (Mike 06), which is designed as a top of popular Python parsers like lxml. &lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Crawler" scheme="http://yoursite.com/tags/Crawler/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Useful Terminal Commands (1)</title>
    <link href="http://yoursite.com/2017/07/19/terminal/"/>
    <id>http://yoursite.com/2017/07/19/terminal/</id>
    <published>2017-07-19T04:12:31.000Z</published>
    <updated>2017-08-18T02:42:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Terminal provides a command line interface to control the UNIX-based operating system. Here’s something important you need to know about Terminal, and what it can do for you.</p>
<h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p><code>pwd</code> is short for “print working directory”. It outputs the path of your current working directory. If you get lost, <code>pwd</code> can tell you where you are.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~ pwd</div><div class="line">/Users/LyuZhanhe</div></pre></td></tr></table></figure>
<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>The <code>ls</code> command outputs the names of all of the folders and files in the working directory. <code>ls</code> is short for “list” (as in “list” the contents).</p>
<p>Folder names end with a <code>/</code>, file names do not. Some terminals also add colorized output to <code>ls</code> to denote different types of files. For instance, Mimir’s terminal has folders in blue, and files in white.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ ls</div><div class="line">Applications             Music                    Public</div><div class="line">Desktop                  PhpstormProjects         Downloads</div><div class="line">Documents                Pictures                 iCloud Drive</div></pre></td></tr></table></figure>
<p><code>ls -l -R Desktop</code>: List all the files on the desktop. <code>-l</code>, <code>-R</code> are parameters, and also can be written as <code>-IR</code>. <code>-l</code> means including details like permissions, owner, file size. <code>-R</code>means including its subdirectories. You can find more parameters <a href="http://www.rapidtables.com/code/linux/ls.htm" target="_blank" rel="external">here</a>.</p>
<p><code>ls d**</code>: List all the files whose names begin with ‘d’.</p>
<h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>The <code>cd</code> command is short for “change directory”. It allows you to change your working directory to some different folder.</p>
<p><code>cd ../</code>: Go up one level.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  ~ cd Desktop</div><div class="line">➜  Desktop cd ../</div><div class="line">➜  ~</div></pre></td></tr></table></figure>
<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p><code>mkdir [dir name]</code>: Create a new directory.</p>
<p><code>mkdir -p dir_1/dir_2</code>: ‘p’ is short for parent. If dir_1 exists in your current working directory, create dir_2 in it. If not, create dir_1, then create dir_2 in it.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  Desktop mkdir test</div><div class="line">➜  Desktop mkdir test/test1</div><div class="line">➜  Desktop cd test</div><div class="line">➜  test ls</div><div class="line">test1</div></pre></td></tr></table></figure>
<p><code>mkdir -m 777 dir_3</code>: Create a directory named ‘dir_3’. It can be read, write and execute by any user.</p>
<p><code>mkdir -m [xxx] dir_4</code>: The first digit represents the owner, the second represents the group and the third represents other users. The number 7 represents all three types of permission (i.e., read, write and execute), 6 stands for read and write only, 5 is read and execute, 4 is read only, 3 is write and execute, 2 is write only, 1 is execute only and 0 is no permission.</p>
<p><code>mkdir -v dir_5</code>: Create a new directory. Also explain what it has done in the terminal, e.g. ‘mkdir: created directory ‘test3’’.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  test mkdir -m 343 test2</div><div class="line">➜  test mkdir -v test3</div><div class="line">mkdir: created directory &apos;test3&apos;</div></pre></td></tr></table></figure>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p><code>rm [file name]</code>: Delete a file. You will be asked to confirm the operation.</p>
<p><code>rm -f [file name]</code>: Forcibly delete the file, the system no longer prompt.</p>
<p><code>rm *.log</code>: Delete all .log files, delete one by one before asking to confirm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜  test ls</div><div class="line">README.md  README1.md README2.md README3.md test1      test2      test3</div><div class="line">➜  test rm README.md</div><div class="line">➜  test ls</div><div class="line">README1.md README2.md README3.md test1      test2      test3</div><div class="line">➜  test rm -f README1.md</div><div class="line">➜  test ls</div><div class="line">README2.md README3.md test1      test2      test3</div><div class="line">➜  test rm *.md</div><div class="line">➜  test ls</div><div class="line">test1 test2 test3</div></pre></td></tr></table></figure>
<h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p><code>rmdir [dirname]</code>: Remove directory (only operates on empty directories).</p>
<p><code>rmdir -p [dirname]</code>: When the subdirectory is deleted so that its parent has become an empty directory, then also delete the parent.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">➜  test rmdir test1</div><div class="line">rmdir: test1: Directory not empty</div><div class="line">➜  test rmdir test2</div><div class="line">➜  test ls</div><div class="line">test1 test3</div><div class="line">➜  test rmdir -p test3/test4</div><div class="line">➜  test ls</div><div class="line">test1</div></pre></td></tr></table></figure>
<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p><code>mv [file] [new filename]</code>: Rename a file.</p>
<p><code>mv [file] [dirname]</code>: Move a source file to a directory.</p>
<p><code>mv [file1] [file2] [dirname]</code>: Move a few files to a same directory.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">➜  test git:(master) ✗ ls -R</div><div class="line">test1 test2</div><div class="line"></div><div class="line">./test1:</div><div class="line">README.md  README1.md README2.md</div><div class="line"></div><div class="line">./test2:</div><div class="line">➜  test cd test1</div><div class="line">➜  test1 mv README.md README1.md README2.md ../test2</div><div class="line">➜  test1 cd ../</div><div class="line">➜  test ls -R</div><div class="line">test1 test2</div><div class="line"></div><div class="line">./test1:</div><div class="line"></div><div class="line">./test2:</div><div class="line">README.md  README1.md README2.md</div></pre></td></tr></table></figure>
<p><code>mv -i [file1] [file2]</code>: Rename file1 to file2. If file2 doesn’t exist, prompt before overwriting.</p>
<p><code>mv -f [file1] [file2]</code>: Rename file1 to file2. Do not prompt before overwriting existing files. Please be careful when using it.</p>
<p><code>mv [dir1] [dir2]</code>: Move dir1 to dir2. If dir2 doesn’t exist, rename dir1 to dir2.</p>
<p><code>mv * ../</code>: Move all files under the current folder to the parent directory.</p>
<p><code>mv [dir1]/* [dir2]</code>: Move the files in dir1 to dir2.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Terminal provides a command line interface to control the UNIX-based operating system. Here’s something important you need to know about 
    
    </summary>
    
      <category term="Terminal" scheme="http://yoursite.com/categories/Terminal/"/>
    
    
      <category term="Terminal" scheme="http://yoursite.com/tags/Terminal/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/15/hello-world/"/>
    <id>http://yoursite.com/2017/07/15/hello-world/</id>
    <published>2017-07-16T01:00:38.000Z</published>
    <updated>2017-08-17T21:33:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi there! It’s Zhanhe :)</p>
<h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><p>Welcome to my blog! This is my very first post. </p>
<h3 id="What-is-it"><a href="#What-is-it" class="headerlink" title="What is it?"></a>What is it?</h3><p>This blog is powered by <a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="external">Hexo</a> and use the theme - <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT.Pisces</a>. Generally, I will share what I am learning and researching or maybe what happened in my life.</p>
<h3 id="How-to-reach-me"><a href="#How-to-reach-me" class="headerlink" title="How to reach me?"></a>How to reach me?</h3><p>Feel free to share your feedback or ideas with me. Here’re some ways to reach me:</p>
<ul>
<li>Comment anything you want under a post.</li>
<li>My email: zhanhe0827@gmail.com</li>
<li>Github: <a href="https://github.com/lvzhanhe" target="_blank" rel="external">https://github.com/lvzhanhe</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi there! It’s Zhanhe :)&lt;/p&gt;
&lt;h2 id=&quot;Welcome&quot;&gt;&lt;a href=&quot;#Welcome&quot; class=&quot;headerlink&quot; title=&quot;Welcome&quot;&gt;&lt;/a&gt;Welcome&lt;/h2&gt;&lt;p&gt;Welcome to my blog
    
    </summary>
    
    
      <category term="About" scheme="http://yoursite.com/tags/About/"/>
    
  </entry>
  
</feed>
