<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhanhe&#39;s BLOG</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-28T16:16:24.732Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhanhe Lyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Cheat Sheet (1)</title>
    <link href="http://yoursite.com/2018/02/23/java1/"/>
    <id>http://yoursite.com/2018/02/23/java1/</id>
    <published>2018-02-24T02:29:04.614Z</published>
    <updated>2018-02-28T16:16:24.732Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Some parts are paraphrased from <a href="http://www.zybooks.com/" target="_blank" rel="external">zyBooks</a> whose copywrite belong to the original writer. </p>
</blockquote>
<h3 id="Computer-program"><a href="#Computer-program" class="headerlink" title="Computer program"></a>Computer program</h3><p>A computer program consists of instructions (aka statements) executing <em>one</em> at a time. Basic <em>instruction</em> types are <strong>input</strong>, <strong>process</strong>,<strong>output</strong>.</p>
<p>A sequence of instructions that solves a problem is called an <strong>algorithm</strong>.</p>
<p>In a program, the cause of a problem is called a <strong>bug</strong>, and troubleshooting is called <strong>debugging</strong>.</p>
<a id="more"></a>
<p>Debugging technics:</p>
<ul>
<li><em>Visual inspection</em></li>
<li><em>Inserting debug output statements</em></li>
<li><em>Hierarchical debugging</em> (divide code into several parts)</li>
</ul>
<h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p>If a method needs to read user input, a good practice is to create a single Scanner object in <code>main()</code> and pass that Scanner object to the method. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readWord</span><span class="params">(Scanner scnr)</span> </span>&#123;</div><div class="line">   String word = scnr.next();</div><div class="line">   <span class="comment">// Do something with the word</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">   Scanner scnr = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">   readWord(scnr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In the following case, input <code>8 9</code>, sum will not always be <code>17</code> because the first input may read input than needed:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> </span>&#123;</div><div class="line">   Scanner scnr = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">    </div><div class="line">   <span class="keyword">return</span> scnr.nextInt();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> sum = readInt() + readInt();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><p>Principles of Object-Oriented Programing: abstraction, encapsulation, modularity.</p>
<p>In a program, an <strong>object</strong> consists of some <em>internal data items</em> plus <em>operations</em> that can be performed on that data.</p>
<p>A reference refers to an object and may be thought of as storing the memory address of an object. Variables of a class data type (and array types) are <em>reference variables</em>.</p>
<p>The <code>new</code> operator allocates memory for an object, then returns a reference to the object’s location in memory.</p>
<p>A statement like <code>TimeHrMin travelTime;</code> declares a reference to an object of type TimeHrMin but not yet refer to a valid object.</p>
<p>In the following case, variables timeRoute1 and timeRoute2 both refer to valid objects and variables timeRoute1 and bestRoute refer to the same object.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DriveTime timeRoute1 = <span class="keyword">new</span> DriveTime();</div><div class="line">DriveTime timeRoute2;</div><div class="line">DriveTime bestRoute;</div><div class="line"></div><div class="line">timeRoute2 = <span class="keyword">new</span> DriveTime();</div><div class="line">bestRoute = timeRoute1;</div></pre></td></tr></table></figure>
<h3 id="Primitive-and-reference-types"><a href="#Primitive-and-reference-types" class="headerlink" title="Primitive and reference types"></a>Primitive and reference types</h3><p>Java variables are one of two types:</p>
<ul>
<li>A <strong>primitive type</strong> variable directly stores the data for that variable type, such as int, double, or char. <code>int num = 20;</code></li>
<li>A <strong>reference type</strong> variable refers to an object. <code>Integer num = 10;</code></li>
</ul>
<p><strong>Primitive wrapper classes</strong> are built-in reference types that augment the primitive types.</p>
<p>Two ways to initialize primitive wrapper class:</p>
<ul>
<li>Object initialization style: <code>Integer num = new Integer(81);</code></li>
<li><code>Double num = 0.0;</code></li>
</ul>
<p>A new memory allocation occurs every time a new value is assigned to an Integer variable, and the previous memory location to which the variable referred, remains <em>unmodified</em>.</p>
<p>A primitive wrapper object (as well as a String object) is <strong>immutable</strong>. That means a programmer cannot change the object via methods or variable assignments after object creation. For instance, <code>Number = 28;</code> does not change the value in Number’s object. Instead, the assignment allocates a new Integer object with value 28, returns a reference to that new object, and assigns the reference to variable Number. The original Integer object remains unchanged.</p>
<p>Using the <strong>equality operators</strong> on two reference variables will evaluate whether each operand refer to a same object. However, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> compare values of objects.</p>
<p>Use <code>equals()</code> (return boolean) and <code>compareTo()</code> (return a number) methods for primitive wrapper types.</p>
<p>The Integer, Double, and Long primitive wrapper classes provide methods for <strong>converting</strong> objects to primitive types: <code>num.intValue()</code>, <code>num.doubleValue()</code>, <code>num.longValue()</code>, <code>c.charValue()</code>, <code>b.booleanValue()</code>.</p>
<p><strong>Strings and numeral systems:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">num.toString()</div><div class="line">Integer.toString(num) <span class="comment">// static method, don't need to create an object</span></div><div class="line">Integer.parseInt(str) <span class="comment">// Returns int value</span></div><div class="line">Integer.valueOf(str)  <span class="comment">// Returns Integer object</span></div><div class="line">Integer.toBinaryString(num1) <span class="comment">// e.g. returns "1001"</span></div></pre></td></tr></table></figure>
<p><strong>Final</strong>: When a variable is declared with <code>final</code> keyword, it’s value cannot be modified, essentially, a constant. If a reference is declared as <code>final</code>, it cannot be changed to refence others.</p>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>An ArrayList is an ordered list of <em>reference type</em> items.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line">ArrayList&lt;String&gt; studentNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div></pre></td></tr></table></figure>
<p>Several ArrayList methods：</p>
<ul>
<li><code>add(element)</code> or <code>add(index element)</code></li>
<li><code>get(index)</code></li>
<li><code>set(index, element)</code> A position should already have a value before <code>set</code>.</li>
<li><code>remove(index)</code></li>
<li><code>size()</code></li>
<li><code>isEmpty()</code></li>
<li><code>clear()</code> After <code>arrayList.clear()</code>, <code>arrayList.get(0)</code> is an invalid access.</li>
</ul>
<p>An ArrayList’s index must be an <strong>integer type</strong> but not a floating-point type, even if 1.0, 2.0 etc.</p>
<p>We can utilize <strong>method chaining</strong> to make code more readable</p>
<h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Doing insertions/removes on large ArrayLists can take a very long time.</p>
<p>Appending a new item to the end of a 100 element ArrayList requires <strong>0</strong> elements to be shifted.</p>
<p>Inserting a new item at the beginning of a 100 element ArrayList requires <strong>100</strong> elements to be shifted.</p>
<ul>
<li>Static memory: static fields which are allocated once and last for the whole duration of a program’s execution with their addresses being unchanged.</li>
<li>The stack (<em>automatic memory</em>): A method call adds local variables to the stack, and a return removes them.</li>
<li>The heap (<em>free store</em>): It’s where <code>new</code> operator allocates memory for objects.</li>
</ul>
<p>The Java virtual machine keeps a count, known as a <strong>reference count</strong>, of all reference variables that are currently referring to an object. If the reference count is zero which means that no variables in the program refer to the object right now, then the object is considered as an <strong>unreachable object</strong>. So it is eligible for <strong>garbage collection</strong>. </p>
<p>Anything in the heap:</p>
<ul>
<li>When we run out of references to the object, then it can be garbage collected.</li>
</ul>
<p>Anything in the stack:</p>
<ul>
<li>When they go out of scope.</li>
</ul>
<p>Static field in a class:</p>
<ul>
<li>These will be in scope throughout your program.</li>
</ul>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>Since <code>main()</code> is a static method, it does not have direct access to the class’ instance members. Instead, it should create an object first.</p>
<p><strong>Member access operator</strong>: operator <code>.</code></p>
<p><strong>Mutator</strong>: setter</p>
<p><strong>Accessor</strong>: getter, which should not modify private data.</p>
<p>A private helper method typically helps public methods carry out their tasks thus cannot be called from <code>main()</code>.</p>
<p>A class creator can <strong>overload</strong> a constructor by defining multiple constructors differing in parameter types.</p>
<p><code>this</code> can also be used in a constructor to invoke a different (overloaded) constructor.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">className</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In general, many programmers recommend only printing the fails when testing a class.</p>
<p>A programmer don’t need to test all possible values when testing a class because it’s impossible.</p>
<p>Running an existing class whenever code is changed is known as <strong>regression testing</strong>. We do this because the change may cause other problems which didn’t happen before.</p>
<h3 id="Abstract-data-types-ADT"><a href="#Abstract-data-types-ADT" class="headerlink" title="Abstract data types (ADT)"></a>Abstract data types (ADT)</h3><p><strong>Encapsulation</strong>: information hiding</p>
<p>The <em>String</em> and <em>ArrayList</em> are examples of ADTs. Since they are part of the Java Class library, programmers do not to access the actual Java code in order to use it. Instead, they typically rely on other information describing an ADT’s public member method signatures.</p>
<h3 id="Java-doc"><a href="#Java-doc" class="headerlink" title="Java doc"></a>Java doc</h3><p>The <strong>Javadoc</strong> tool parses source code and specially formatted comments to generate <strong>API</strong>.</p>
<ul>
<li><code>@author</code>: the author of the whole class</li>
<li><code>@version</code>: the version number of the class</li>
<li><code>@param</code>: params of a method</li>
<li><code>@return</code>: returned value or object of a method</li>
<li><code>@see</code>: reference to orther source</li>
</ul>
<h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p><code>throws</code> Warning keyword. Goes in a method header. <code>public int myMethod throws NumberFormat Exception {</code> Method might cause an exception of the specified type and then not handle it. Anyone who uses this code must either handle the exception or also throws it.</p>
<p><code>throw new</code> <code>throw new NumberFormatException();</code> Statement that directly and immediately causes the specified exception. Can use this to force code to crash rather than giving wrong answers.</p>
<p><strong>try</strong> block exits immediately when a <strong>throw</strong> statement executes. <strong>finally</strong> follows all catch blocks.</p>
<p>Use <code>excpt.getMessage()</code> to get error message.</p>
<p>If an exception is thrown within a method and not caught within that method, then the method is immediately exited. </p>
<ul>
<li><strong>checked exception</strong>: An exception that should be handled via try-catch or the throwing method must specify that the appropriate exception type may be thrown by appending a throws clause to the method’s definition.</li>
</ul>
<ul>
<li><strong>unchecked exception</strong>: an exception that due to hardware or logic errors and don’t need to be handled</li>
</ul>
<p><code>FileNotFoundException</code> must be thrown by a fileReader’s constructor.</p>
<h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>Superclass: base class</p>
<p>Subclass: derived class</p>
<p>The members of a derived class can access the public members of the base class, but not the private members.</p>
<p>Access specifier <strong>protected</strong> provides access to derived classes and other classes in the same package but not by anyone else.</p>
<p><strong>Overriding</strong> differs from <strong>overloading</strong>. In overloading, methods with the same name must have different parameter types. In overriding, a derived class member method takes <em>precedence</em> over base class member method with the same name and parameter types. </p>
<p>The annatation <code>@Override</code> is optional but helps the compiler detect errors better.</p>
<p><strong>Object class</strong> will be the base class for classes that do not have a superclass.</p>
<p><code>toString()</code> of Object class returns a String containing the <em>name</em> of the class of which the object is an instance of with the object’s hexadecimal <em>address</em> in memory (hashcode).</p>
<p><code>equals(otherObject)</code> of Object class returns whether two variables refer to a same object.</p>
<p>Constructor in subclass will call <code>super()</code> first, which is different from orther regular methods.</p>
<h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p><strong>Polymorphism</strong> refers to determining which program behavior to execute depending on data types.</p>
<ul>
<li>Compile-time polymorphism: the compiler determines which of several identically-named methods to be called based on the method’s arguments</li>
<li>Runtime polymorphism:  the determination is made when the program is running. E.g. a collection of objects of both base and derived class types</li>
</ul>
<p>Any object has two types associated with it. It has its display type and an implementation type.</p>
<p><code>IntegerArrayBag a = new SafeIntegerArryBag();</code> Its type is IntegerArrayBag but it’s implemented as a SafeIntegerArrayBag. </p>
<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>An <strong>interface</strong> specifies a set of methods that an implementing class must override and define.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">pen</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Any class that implements an interface must:</p>
<ul>
<li>List the interface name after the keyword <code>implements</code></li>
<li>Override and implement the interface’s methods</li>
</ul>
<p>A class can implement multiple interfaces using a comma separated list although a class can only inherit from only one superclass.</p>
<p>An interface cannot be instantiated.</p>
<p>An interface contains method declarations, as opposed to method definitions.</p>
<p>Each of the primitive wrapper classes (e.g., Integer, Double) implements the Comparable interface, which declares the <code>compareTo()</code> method.</p>
<p>Methods declared by an interface must be overridden and defined by the implementing class.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Some parts are paraphrased from &lt;a href=&quot;http://www.zybooks.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zyBooks&lt;/a&gt; whose copywrite belong to the original writer. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Computer-program&quot;&gt;&lt;a href=&quot;#Computer-program&quot; class=&quot;headerlink&quot; title=&quot;Computer program&quot;&gt;&lt;/a&gt;Computer program&lt;/h3&gt;&lt;p&gt;A computer program consists of instructions (aka statements) executing &lt;em&gt;one&lt;/em&gt; at a time. Basic &lt;em&gt;instruction&lt;/em&gt; types are &lt;strong&gt;input&lt;/strong&gt;, &lt;strong&gt;process&lt;/strong&gt;,&lt;strong&gt;output&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A sequence of instructions that solves a problem is called an &lt;strong&gt;algorithm&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In a program, the cause of a problem is called a &lt;strong&gt;bug&lt;/strong&gt;, and troubleshooting is called &lt;strong&gt;debugging&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Intelligent virtual assistant</title>
    <link href="http://yoursite.com/2017/11/04/Intelligent-virtual-assistant/"/>
    <id>http://yoursite.com/2017/11/04/Intelligent-virtual-assistant/</id>
    <published>2017-11-04T19:13:29.000Z</published>
    <updated>2017-11-16T04:12:01.836Z</updated>
    
    <content type="html"><![CDATA[<p>Intelligent virtual assistant, also known as conversational interfaces, digital assistants, or chat bots, enables people to converse with a machine in a dialogic fashion, using natural language. It works wherever there is digital-based communication. Some popular virtual assistants like Apple’s Siri, Microsoft’s Cortana, Amazon’s Alexa, Google’s Now assistant, are highly appreciated by users for their efficiency and multifunction. In this essay, I will introduce how to make a virtual assistant become intelligent, by mentioning its conversation engine architecture and supporting technologies.</p>
<a id="more"></a>
<h2 id="Three-types-of-tasks"><a href="#Three-types-of-tasks" class="headerlink" title="Three types of tasks"></a>Three types of tasks</h2><p>First of all, the virtual assistant should clearly classify what kind of task it is facing. From general knowledge to specific, we divide conversations which intelligent virtual assistant will tackle into three types. The first type is a general conversation. There is no specific objective during a general conversation, just like a chit-chat. Most users carry out such form of conversation for fun, or in other words, to pass their time. The second type is about information and answers. It generally contains just one turn, a question, and an answer. The objective of this kind of conversation is providing information. The last one is task-oriented dialogue. For instance, when one walks into a grocery store, the salesclerk will ask the customer a series of purposeful questions. “What can I get for you?” “Anything else?” “Do you have a loyalty card?” This conversation ends until the customer gets what he or she wants. These three skills above are three of the most important skills we have in researching man-machine conversations. </p>
<h2 id="Pattern-matchers"><a href="#Pattern-matchers" class="headerlink" title="Pattern matchers"></a>Pattern matchers</h2><p>There are complicated architectures inside an intelligent virtual assistant. The way called “pattern matchers” is the simplest one to produce output according to input. Intelligent virtual assistant can learn from the internet. It first scans on the internet. Then extract pairs of sentences to form its own corpus. After creating its own knowledge system, when a sentence is entered, the virtual assistant will match this sentence to what it got from the internet. The highest matched sentence will be the key to find the response. Such way is sometimes efficient but is kind of stock and may give us some ambiguous returns. To value and optimize each answer, we have algorithms and neural networks. </p>
<h2 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h2><p>To execute the process algorithmically, one or a set of equations are needed. Every sentence in the corpus now has been classified to one certain class. When a sentence is entered, according to each word, a score will be assigned to a class. This score is different in different situations.For instance, personal pronouns like “I”, “you”, “we”, or prepositions like“in”, “on”, “at” has fewer weights than some words which have real meaning. The class who holds the highest value will be taken into account after a series of calculations. A lot of conversation engine now make use of this classification method. However, the logic issue is a huge obstacle to overcome. When there is a word “not” in the sentence, the conversation engine will be confused about what this negation refers to. Then causing disorder in the process of assignment of scores. Thus, a score does not mean probability but how well the question and answer match.</p>
<h2 id="Neural-network"><a href="#Neural-network" class="headerlink" title="Neural network"></a>Neural network</h2><p>Artificial neural network is the most efficient and intelligent way to produce the output because it is a non-linear learner. It is a form of connectionism which inspired by biological neural networks of animal brains, invented in 1940’s. Multiple level artificial neural networks exists between the input layer and the output layer. One kind of common neural network is called Convolutional Neural Network. It appears like a small window, each window intercepts a certain amount of information, and extracted out to do convolution. Each term of convolution returns a value, which will be used for further computation. Another common neural network is 2D Convolutional Neural Network. Different from the first one, in 2D Convolutional Neural Network, the small window slides and intercepts information in a 2D range. The third one is Recurrent Neural Network. It refers to the process of a sequence of strings. The output of any position is restricted by information in the position of the previous position or the previous state, which is called hidden state. It helps predict the input probability of each word.</p>
<h2 id="Multi-turn-conversation"><a href="#Multi-turn-conversation" class="headerlink" title="Multi-turn conversation"></a>Multi-turn conversation</h2><p>When a virtual assistant is dealing with a multi-turn conversation, the engine will no longer focus on the current input. What it does is to keep track of what user said previously. Thus, every sentence will be encoded. Then each code will reflect the information of the entire sentence. The engine interprets the input by using Attention model. Attention model helps the answer-generation process go with the target and helps the engine better understand the user. </p>
<p>Technologies today have made the virtual assistant much more intelligent. Intelligent virtual assistant has reached to a wide range of users and been applied to different fields. Scientists are still working hard in order to bring it more fantastic features. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Intelligent virtual assistant, also known as conversational interfaces, digital assistants, or chat bots, enables people to converse with a machine in a dialogic fashion, using natural language. It works wherever there is digital-based communication. Some popular virtual assistants like Apple’s Siri, Microsoft’s Cortana, Amazon’s Alexa, Google’s Now assistant, are highly appreciated by users for their efficiency and multifunction. In this essay, I will introduce how to make a virtual assistant become intelligent, by mentioning its conversation engine architecture and supporting technologies.&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
      <category term="AI" scheme="http://yoursite.com/tags/AI/"/>
    
      <category term="Chat bot" scheme="http://yoursite.com/tags/Chat-bot/"/>
    
  </entry>
  
  <entry>
    <title>How to turn up system volume during a FaceTime call</title>
    <link href="http://yoursite.com/2017/09/30/facetime/"/>
    <id>http://yoursite.com/2017/09/30/facetime/</id>
    <published>2017-09-30T14:16:37.000Z</published>
    <updated>2017-09-30T18:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>People who are using Mac OS may find that system volume is extremely low during a FaceTime call. It dulls every other sound. Here are two esay steps to solve this problem.<br><a id="more"></a></p>
<h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>Open FaceTime and do step 2 before you make a call.</p>
<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>Launch the terminal and enter the command below:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ~ printf &quot;p *(char*)(void(*)())AudioDeviceDuck=0xc3\nq&quot; | lldb -n FaceTime</div></pre></td></tr></table></figure>
<p>The same as other applications. Just replace <code>FaceTime</code> with your application name!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;People who are using Mac OS may find that system volume is extremely low during a FaceTime call. It dulls every other sound. Here are two esay steps to solve this problem.&lt;br&gt;
    
    </summary>
    
      <category term="Terminal" scheme="http://yoursite.com/categories/Terminal/"/>
    
    
      <category term="Terminal" scheme="http://yoursite.com/tags/Terminal/"/>
    
      <category term="Unix" scheme="http://yoursite.com/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>2 Easy Steps to Extract .rar Files</title>
    <link href="http://yoursite.com/2017/09/01/unrar/"/>
    <id>http://yoursite.com/2017/09/01/unrar/</id>
    <published>2017-09-02T04:07:50.000Z</published>
    <updated>2017-09-02T04:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>We always need to extract <code>.rar</code> files in order to get the stuff inside. However, unlike <code>.zip</code> files, macOS and OS X does not include a built-in archive utility tool that opens <code>.rar</code> files. So, here is a good and convenient way for you.</p>
<h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>Install <strong><em>unrar</em></strong> by using Homebrew. (Infos about Homebrew can be found <a href="https://brew.sh/" target="_blank" rel="external">here</a>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ~ brew install unrar</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>Go to the directory where you save the <code>.rar</code> file. Then type the command below.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ~ unrar x [filename.rar]</div></pre></td></tr></table></figure></p>
<p>Then you’ll get what you want!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We always need to extract &lt;code&gt;.rar&lt;/code&gt; files in order to get the stuff inside. However, unlike &lt;code&gt;.zip&lt;/code&gt; files, macOS and OS X does not include a built-in archive utility tool that opens &lt;code&gt;.rar&lt;/code&gt; files. So, here is a good and convenient way for you.&lt;/p&gt;
&lt;h3 id=&quot;Step-1&quot;&gt;&lt;a href=&quot;#Step-1&quot; class=&quot;headerlink&quot; title=&quot;Step 1&quot;&gt;&lt;/a&gt;Step 1&lt;/h3&gt;&lt;p&gt;Install &lt;strong&gt;&lt;em&gt;unrar&lt;/em&gt;&lt;/strong&gt; by using Homebrew. (Infos about Homebrew can be found &lt;a href=&quot;https://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;➜  ~ brew install unrar&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Terminal" scheme="http://yoursite.com/categories/Terminal/"/>
    
    
      <category term="Terminal" scheme="http://yoursite.com/tags/Terminal/"/>
    
      <category term="Unix" scheme="http://yoursite.com/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>Basic Unix Commands (2)</title>
    <link href="http://yoursite.com/2017/08/31/command2/"/>
    <id>http://yoursite.com/2017/08/31/command2/</id>
    <published>2017-08-31T19:12:36.000Z</published>
    <updated>2017-10-02T02:56:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p><code>cp [file] [dirname]</code>: Copy a single file to a target directory. If the file has been existed in the directory, you will be asked to confirm the replacement.</p>
<p><code>cp -a [file] [dirname]</code>: The parameter <code>-a</code> and preserve the specified attributes.</p>
<a id="more"></a>
<h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p><code>touch [file]</code>: Create a file.</p>
<p><code>touch [file1] [file2]</code>: Create files.</p>
<p><code>touch -t 201211234343.90 [file]</code>: Create a file and set its timestamp.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  ~ touch -t 201211234343.90 log1.log</div><div class="line">➜  ~ ll *.log</div><div class="line">-rw-r--r--  1 lyuZhanhe  staff     0B Nov 24  2012 log1.log</div></pre></td></tr></table></figure>
<p><code>touch -r [file1] [file2]</code>: Update the timestemp of file1 to the same as file2.</p>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>It is used to display the content of a file or link several files together or create new one. However, it cannot edit existing files.</p>
<p><code>cat [file]</code>: Display the content of a file. If you specify more than one file name, <code>cat</code> will display those files one after the other.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  Desktop cat hello.md</div><div class="line">hello world!%</div></pre></td></tr></table></figure>
<p><code>cat -n [file]</code>: Number all the output lines .</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  Desktop cat -n h1.md</div><div class="line">     1	line 1</div><div class="line">     2	line 2</div><div class="line">     3	lin3 3%</div></pre></td></tr></table></figure>
<p><code>cat [file1] &gt; [file2]</code>: Copy the content in <code>[file1]</code> to <code>[file2]</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  Desktop cat h1.md &gt; h2.md</div></pre></td></tr></table></figure>
<p><code>cat [file1] &gt;&gt; [file2]</code>: Append the content in <code>[file1]</code> to <code>[file2]</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  Desktop cat h1.md &gt;&gt; h2.md</div></pre></td></tr></table></figure>
<p>An example:</p>
<p>We use <code>cat</code> to catenate output text to the file’s contents.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  Desktop echo &quot;My Classes:&quot; | cat - list.txt</div><div class="line">My Classes:</div><div class="line">math</div><div class="line">biology</div><div class="line">physics</div></pre></td></tr></table></figure>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><code>find ~ -name &quot;*.log&quot; -print</code>: Find all the .log files in the root directory and print the result.</p>
<p><code>find . -name &quot;*.log&quot; -print</code>: Find all the .log files in the current directory and print the result.</p>
<p><code>find -atime -[n]</code>: Find all the files which have been accessed in n days.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;cp&quot;&gt;&lt;a href=&quot;#cp&quot; class=&quot;headerlink&quot; title=&quot;cp&quot;&gt;&lt;/a&gt;cp&lt;/h3&gt;&lt;p&gt;&lt;code&gt;cp [file] [dirname]&lt;/code&gt;: Copy a single file to a target directory. If the file has been existed in the directory, you will be asked to confirm the replacement.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cp -a [file] [dirname]&lt;/code&gt;: The parameter &lt;code&gt;-a&lt;/code&gt; and preserve the specified attributes.&lt;/p&gt;
    
    </summary>
    
      <category term="Terminal" scheme="http://yoursite.com/categories/Terminal/"/>
    
    
      <category term="Terminal" scheme="http://yoursite.com/tags/Terminal/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Unix" scheme="http://yoursite.com/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>Web Crawler in Python</title>
    <link href="http://yoursite.com/2017/08/07/Web-Crawler-in-Python/"/>
    <id>http://yoursite.com/2017/08/07/Web-Crawler-in-Python/</id>
    <published>2017-08-07T20:02:37.000Z</published>
    <updated>2017-08-08T02:30:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Search engines like Google, Bin, and Yahoo have become an irreplaceable tool of human life today. They filter information and retrieve data, helping people find what they want. However, it is not so familiar to people how search engines work. Actually, the main part of them is web Crawler (also called Spider), which is heavily used in today’s technologies. They are used to get specific information on web pages and do further operations.</p>
<h2 id="Why-python"><a href="#Why-python" class="headerlink" title="Why python?"></a>Why python?</h2><p>As we can find, nowadays, most of web crawlers are based on Python. Lots of people may be curious about why it is Python. Actually, other languages like PHP, Java, C++, can also implement similar functions. However, Python has many advantages over them. First of all, Python has great HTTP libraries and HTML parsers. A basic one used to do this is “request”. An advanced one is “Beautiful Soup” (Mike 06), which is designed as a top of popular Python parsers like lxml. </p>
<a id="more"></a>
<p>Furthermore, there are a lot of useful frameworks off the shelf. For instance, Tornado can support the I/O (input or output) from being blocked. Besides, Scrapy is a good one to build a scalable and distributed crawler. These will make developing period easier and more efficient. Therefore, it is safe to conclude that Python is a good choice for developing a web crawler.</p>
<h2 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h2><p>The basic mechanism of web crawler is not complicated. Web crawler scans the web, reading specific data which has been set previously. It may start with some popular sites which have higher hits. Then it can spread through the internet by finding the related link within the sites. The crawler turns its finding to a giant index (Paul 05). In this giant index, it contains a great deal of data which meet requirements. A case in point, when a word “engineer” is entered in a search engine, it will check the whole index, then provide items related to “engineer”. Web crawler scan the web regularly to make sure its information is up to date. It sounds like an easy process. </p>
<p>However, in order to acquire and then provide both accurate and reliable information, there are further steps to do (Vural 03). Web crawler should not only know what they get, but should also recognize where they get this data. It is extremely vital in practical application. For instance, a word appears in “heading” is more appropriate that which appears in “context”. For another, when one search in a video website, it will return particular information like name, singer, album. These are all related staff surrounding key words. Besides, there are always complicated algorithms based on the content of index. Essentially, these are equations to value and rate results coded by programmers. </p>
<h2 id="How-to-make-a-crawler"><a href="#How-to-make-a-crawler" class="headerlink" title="How to make a crawler?"></a>How to make a crawler?</h2><p>A python editor and a python environment are required to encode and implement a crawler program. Basically, the module called <code>urllib</code> is used to open a link in python program and return a HTML file.( Wael 03) The argument is just like <code>page = urllib.request.urlopen(url, data, timeout)</code>. Initialing a variable for the link is recommended, since there are always further algorithms on it. The first parameter is the link, the second parameter is data need to be transported in this process, the final one is setting timeout. After that, the main task is to find useful information in that file. For example, specific data can be found by locating specific label name. The argument is like <code>start_link = page.find(“&lt;span class = ‘title’&gt;”)</code>. </p>
<p>Sometimes the data found just used to print in a python console. In order to be printed friendly, some small changes should be replaced. For instance, <code>&lt;br&gt;</code> should be replaced with <code>&lt;\t&gt;</code>. However, sometimes the data need to be stored in local file system by using the function <code>urllib.urlretrieve()</code> and a loop if necessary. In some dynamic websites, the data need to be transported to another page, like login page (Kristopher 05). At this point, there are two data transfer functions called get and post. For the function <code>get</code>, it transfers the data by creating a new url containing the data. And for the function <code>post</code>, it transfers by creating a dictionary containing different parameters. </p>
<h2 id="What’s-it-used-for？"><a href="#What’s-it-used-for？" class="headerlink" title="What’s it used for？"></a>What’s it used for？</h2><p>Apart from the search engine mentioned in the beginning, there are a great number of projects can be achieved by using web crawler. There is an interesting example given by Emily L, a graduate student at Harvard University. Some programmers used web crawler to dig out what is the most common time for people to sleep. Since most people would like to post something like “I need to sleep” before they get to bed, the web crawler will scan through Twitter how many times the word “sleep” appeared in successive time intervals. Then it stores the data and presents it friendly as a diagram.</p>
<h2 id="Works-cited"><a href="#Works-cited" class="headerlink" title="Works cited"></a>Works cited</h2><p>Thelwall, Mike. “A Web Crawler Design for DataMining.” vol. 27, SAGE Publications, Inc, Thousand Oaks, CA, 2011;2001;,doi:10.1177/016555150102700503.</p>
<p>Gab–Allah, Wael A., Ben Bella S. Tawfik, and Hamed M.Nassar. “An Ontology Based Crawler for Retrieving Information Distributedon the Web.” International Journal of Engineering Research andApplications, vol. 6, no. 6, 2016, pp. 57-63.</p>
<p>Jones, Kristopher B. Search Engine Optimization: Your VisualBlueprint for Effective Internet Marketing. Wiley, Indianapolis, IN, 2008.</p>
<p>Zandbergen, Paul A. Python Scripting for ArcGIS. ESRI Press,New York, 2013;2015;.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Search engines like Google, Bin, and Yahoo have become an irreplaceable tool of human life today. They filter information and retrieve data, helping people find what they want. However, it is not so familiar to people how search engines work. Actually, the main part of them is web Crawler (also called Spider), which is heavily used in today’s technologies. They are used to get specific information on web pages and do further operations.&lt;/p&gt;
&lt;h2 id=&quot;Why-python&quot;&gt;&lt;a href=&quot;#Why-python&quot; class=&quot;headerlink&quot; title=&quot;Why python?&quot;&gt;&lt;/a&gt;Why python?&lt;/h2&gt;&lt;p&gt;As we can find, nowadays, most of web crawlers are based on Python. Lots of people may be curious about why it is Python. Actually, other languages like PHP, Java, C++, can also implement similar functions. However, Python has many advantages over them. First of all, Python has great HTTP libraries and HTML parsers. A basic one used to do this is “request”. An advanced one is “Beautiful Soup” (Mike 06), which is designed as a top of popular Python parsers like lxml. &lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Crawler" scheme="http://yoursite.com/tags/Crawler/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Basic Unix Commands (1)</title>
    <link href="http://yoursite.com/2017/07/18/command1/"/>
    <id>http://yoursite.com/2017/07/18/command1/</id>
    <published>2017-07-19T04:12:31.000Z</published>
    <updated>2017-11-04T19:29:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Terminal provides a command line interface to control the UNIX-based operating system. Here’s something important you need to know about Terminal, and what it can do for you.</p>
<h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p><code>pwd</code> is short for “print working directory”. It outputs the path of your current working directory. If you get lost, <code>pwd</code> can tell you where you are.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~ pwd</div><div class="line">/Users/LyuZhanhe</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>The <code>ls</code> command outputs the names of all of the folders and files in the working directory. <code>ls</code> is short for “list” (as in “list” the contents).</p>
<p>Folder names end with a <code>/</code>, file names do not. Some terminals also add colorized output to <code>ls</code> to denote different types of files. For instance, Mimir’s terminal has folders in blue, and files in white.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ ls</div><div class="line">Applications             Music                    Public</div><div class="line">Desktop                  PhpstormProjects         Downloads</div><div class="line">Documents                Pictures                 iCloud Drive</div></pre></td></tr></table></figure>
<p><code>ls -l -R Desktop</code>: List all the files on the desktop. <code>-l</code>, <code>-R</code> are parameters, and also can be written as <code>-IR</code>. <code>-l</code> means including details like permissions, owner, file size. <code>-R</code>means including its subdirectories. You can find more parameters <a href="http://www.rapidtables.com/code/linux/ls.htm" target="_blank" rel="external">here</a>.</p>
<p><code>ls d**</code>: List all the files whose names begin with ‘d’.</p>
<p><code>ls -a</code>: Show hidden files.</p>
<h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>The <code>cd</code> command is short for “change directory”. It allows you to change your working directory to some different folder.</p>
<p><code>cd ../</code>: Go up one level.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  ~ cd Desktop</div><div class="line">➜  Desktop cd ../</div><div class="line">➜  ~</div></pre></td></tr></table></figure>
<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p><code>mkdir [dir name]</code>: Create a new directory.</p>
<p><code>mkdir -p dir_1/dir_2</code>: ‘p’ is short for parent. If dir_1 exists in your current working directory, create dir_2 in it. If not, create dir_1, then create dir_2 in it.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  Desktop mkdir test</div><div class="line">➜  Desktop mkdir test/test1</div><div class="line">➜  Desktop cd test</div><div class="line">➜  test ls</div><div class="line">test1</div></pre></td></tr></table></figure>
<p><code>mkdir -m 777 dir_3</code>: Create a directory named ‘dir_3’. It can be read, write and execute by any user.</p>
<p><code>mkdir -m [xxx] dir_4</code>: The first digit represents the owner, the second represents the group and the third represents other users. The number 7 represents all three types of permission (i.e., read, write and execute), 6 stands for read and write only, 5 is read and execute, 4 is read only, 3 is write and execute, 2 is write only, 1 is execute only and 0 is no permission.</p>
<p><code>mkdir -v dir_5</code>: Create a new directory. Also explain what it has done in the terminal, e.g. ‘mkdir: created directory ‘test3’’.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  test mkdir -m 343 test2</div><div class="line">➜  test mkdir -v test3</div><div class="line">mkdir: created directory &apos;test3&apos;</div></pre></td></tr></table></figure>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p><code>rm [file name]</code>: Delete a file. You will be asked to confirm the operation.</p>
<p><code>rm -f [file name]</code>: Forcibly delete the file, the system no longer prompt.</p>
<p><code>rm *.log</code>: Delete all .log files, delete one by one before asking to confirm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜  test ls</div><div class="line">README.md  README1.md README2.md README3.md test1      test2      test3</div><div class="line">➜  test rm README.md</div><div class="line">➜  test ls</div><div class="line">README1.md README2.md README3.md test1      test2      test3</div><div class="line">➜  test rm -f README1.md</div><div class="line">➜  test ls</div><div class="line">README2.md README3.md test1      test2      test3</div><div class="line">➜  test rm *.md</div><div class="line">➜  test ls</div><div class="line">test1 test2 test3</div></pre></td></tr></table></figure>
<h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p><code>rmdir [dirname]</code>: Remove directory (only operates on empty directories).</p>
<p><code>rmdir -p [dirname]</code>: When the subdirectory is deleted so that its parent has become an empty directory, then also delete the parent.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">➜  test rmdir test1</div><div class="line">rmdir: test1: Directory not empty</div><div class="line">➜  test rmdir test2</div><div class="line">➜  test ls</div><div class="line">test1 test3</div><div class="line">➜  test rmdir -p test3/test4</div><div class="line">➜  test ls</div><div class="line">test1</div></pre></td></tr></table></figure>
<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p><code>mv [file] [new filename]</code>: Rename a file.</p>
<p><code>mv [file] [dirname]</code>: Move a source file to a directory.</p>
<p><code>mv [file1] [file2] [dirname]</code>: Move a few files to a same directory.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">➜  test ls -R</div><div class="line">test1 test2</div><div class="line"></div><div class="line">./test1:</div><div class="line">README.md  README1.md README2.md</div><div class="line"></div><div class="line">./test2:</div><div class="line">➜  test cd test1</div><div class="line">➜  test1 mv README.md README1.md README2.md ../test2</div><div class="line">➜  test1 cd ../</div><div class="line">➜  test ls -R</div><div class="line">test1 test2</div><div class="line"></div><div class="line">./test1:</div><div class="line"></div><div class="line">./test2:</div><div class="line">README.md  README1.md README2.md</div></pre></td></tr></table></figure>
<p><code>mv -i [file1] [file2]</code>: Rename file1 to file2. If file2 doesn’t exist, prompt before overwriting.</p>
<p><code>mv -f [file1] [file2]</code>: Rename file1 to file2. Do not prompt before overwriting existing files. Please be careful when using it.</p>
<p><code>mv [dir1] [dir2]</code>: Move dir1 to dir2. If dir2 doesn’t exist, rename dir1 to dir2.</p>
<p><code>mv * ../</code>: Move all files under the current folder to the parent directory.</p>
<p><code>mv [dir1]/* [dir2]</code>: Move the files in dir1 to dir2.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Terminal provides a command line interface to control the UNIX-based operating system. Here’s something important you need to know about Terminal, and what it can do for you.&lt;/p&gt;
&lt;h3 id=&quot;pwd&quot;&gt;&lt;a href=&quot;#pwd&quot; class=&quot;headerlink&quot; title=&quot;pwd&quot;&gt;&lt;/a&gt;pwd&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; is short for “print working directory”. It outputs the path of your current working directory. If you get lost, &lt;code&gt;pwd&lt;/code&gt; can tell you where you are.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;➜  ~ pwd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/Users/LyuZhanhe&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Terminal" scheme="http://yoursite.com/categories/Terminal/"/>
    
    
      <category term="Terminal" scheme="http://yoursite.com/tags/Terminal/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Unix" scheme="http://yoursite.com/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/15/hello-world/"/>
    <id>http://yoursite.com/2017/07/15/hello-world/</id>
    <published>2017-07-16T01:00:38.000Z</published>
    <updated>2017-08-17T21:33:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi there! It’s Zhanhe :)</p>
<h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><p>Welcome to my blog! This is my very first post. </p>
<h3 id="What-is-it"><a href="#What-is-it" class="headerlink" title="What is it?"></a>What is it?</h3><p>This blog is powered by <a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="external">Hexo</a> and use the theme - <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT.Pisces</a>. Generally, I will share what I am learning and researching or maybe what happened in my life.</p>
<h3 id="How-to-reach-me"><a href="#How-to-reach-me" class="headerlink" title="How to reach me?"></a>How to reach me?</h3><p>Feel free to share your feedback or ideas with me. Here’re some ways to reach me:</p>
<ul>
<li>Comment anything you want under a post.</li>
<li>My email: zhanhe0827@gmail.com</li>
<li>Github: <a href="https://github.com/lvzhanhe" target="_blank" rel="external">https://github.com/lvzhanhe</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi there! It’s Zhanhe :)&lt;/p&gt;
&lt;h2 id=&quot;Welcome&quot;&gt;&lt;a href=&quot;#Welcome&quot; class=&quot;headerlink&quot; title=&quot;Welcome&quot;&gt;&lt;/a&gt;Welcome&lt;/h2&gt;&lt;p&gt;Welcome to my blog
    
    </summary>
    
    
      <category term="About" scheme="http://yoursite.com/tags/About/"/>
    
  </entry>
  
</feed>
